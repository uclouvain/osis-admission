# ##############################################################################
#
#  OSIS stands for Open Student Information System. It's an application
#  designed to manage the core business of higher education institutions,
#  such as universities, faculties, institutes and professional schools.
#  The core business involves the administration of students, teachers,
#  courses, programs and so on.
#
#  Copyright (C) 2015-2023 UniversitÃ© catholique de Louvain (http://www.uclouvain.be)
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  A copy of this license - GNU General Public License - is available
#  at the root of the source code of this program.  If not,
#  see http://www.gnu.org/licenses/.
#
# ##############################################################################
import uuid
from email.message import EmailMessage
from typing import Optional

import attr
from django.conf import settings
from django.utils import translation
from django.utils.translation import gettext_lazy as _

from admission.contrib.models import (
    SupervisionActor,
)
from admission.contrib.models.base import BaseAdmission
from admission.ddd.admission.enums.emplacement_document import (
    OngletsDemande,
    TypeEmplacementDocument,
    IdentifiantBaseEmplacementDocument,
    StatutEmplacementDocument,
)
from osis_profile.models import EducationalExperienceYear


FORMATTED_EMAIL_FOR_HISTORY = """{sender_label} : {sender}
{recipient_label} : {recipient}
{cc}{subject_label} : {subject}

{message}"""


def get_message_to_historize(message: EmailMessage) -> dict:
    """
    Get the message to be saved in the history.
    """
    plain_text_content = ""
    for part in message.walk():
        # Mail payload is decoded to bytes then decode to utf8
        if part.get_content_type() == "text/plain":
            plain_text_content = part.get_payload(decode=True).decode(settings.DEFAULT_CHARSET)

    format_args = {
        'sender_label': _("Sender"),
        'recipient_label': _("Recipient"),
        'subject_label': _("Subject"),
        'sender': message.get("From"),
        'recipient': message.get("To"),
        'cc': "CC : {}\n".format(message.get("Cc")) if message.get("Cc") else '',
        'subject': message.get("Subject"),
        'message': plain_text_content,
    }

    with translation.override(settings.LANGUAGE_CODE_FR):
        message_fr = FORMATTED_EMAIL_FOR_HISTORY.format(**format_args)
    with translation.override(settings.LANGUAGE_CODE_EN):
        message_en = FORMATTED_EMAIL_FOR_HISTORY.format(**format_args)

    return {
        settings.LANGUAGE_CODE_FR: message_fr,
        settings.LANGUAGE_CODE_EN: message_en,
    }


def dto_to_dict(dto):
    """Make a shallow dict copy of a DTO."""
    return dict((field.name, getattr(dto, field.name)) for field in attr.fields(type(dto)))


def get_document_from_identifier(
    admission: BaseAdmission,
    document_identifier: str,
) -> Optional[dict]:
    """
    Get information about a document placement based on its identifier and the related admission.
    The identifier is composed of:
    - [TAB_IDENTIFIER].QUESTION_SPECIFIQUE.[SPECIFIC_QUESTION_UUID] for a specific question
    - [TAB_IDENTIFIER].[DOMAIN_IDENTIFIER] for categorized documents. If a document belongs to a model different from
    the admission then the related object uuid is included between the base_identifier and the document identifiers.
    - LIBRE_GESTIONNAIRE.[DOCUMENT_UUID] for free documents uploaded by a manager
    - LIBRE_CANDIDAT.[SPECIFIC_QUESTION_UUID] for a requested free document
    - SYSTEME.[DOMAIN_IDENTIFIER] for internal documents that are generated by the system
    """
    field = None
    obj = None
    document_type = None
    document_uuids = []
    requestable_document = None
    specific_question_uuid = None
    document_identifier_parts = document_identifier.split('.')
    identifiers_nb = len(document_identifier_parts)
    requested_document = admission.requested_documents.get(document_identifier, {})
    if identifiers_nb < 2:
        return

    base_identifier = document_identifier_parts[0]

    if base_identifier == IdentifiantBaseEmplacementDocument.LIBRE_CANDIDAT.name:
        # Requested free documents
        # LIBRE_CANDIDAT.[SPECIFIC_QUESTION_UUID]
        if identifiers_nb != 2:
            return
        obj = admission
        field = 'specific_question_answers'
        specific_question_uuid = document_identifier_parts[-1]
        document_uuids = admission.specific_question_answers.get(specific_question_uuid)
        document_type = requested_document.get('type')
        document_status = requested_document.get('status')
        requestable_document = True

    elif document_identifier_parts[1] == IdentifiantBaseEmplacementDocument.QUESTION_SPECIFIQUE.name:
        # Non free document specified with a specific question
        # [TAB_IDENTIFIER].QUESTION_SPECIFIQUE.[SPECIFIC_QUESTION_UUID]
        if identifiers_nb != 3:
            return
        obj = admission
        field = 'specific_question_answers'
        specific_question_uuid = document_identifier_parts[-1]
        document_uuids = admission.specific_question_answers.get(specific_question_uuid)
        document_type = TypeEmplacementDocument.NON_LIBRE.name
        document_status = requested_document.get('status', StatutEmplacementDocument.NON_ANALYSE.name)
        requestable_document = True

    elif base_identifier == IdentifiantBaseEmplacementDocument.LIBRE_GESTIONNAIRE.name:
        # Free documents uploaded by the manager
        # DOCUMENTS_ADDITIONNELS.[DOCUMENT_UUID]

        obj = admission
        requestable_document = False
        document_status = StatutEmplacementDocument.VALIDE.name

        document_uuid = uuid.UUID(document_identifier_parts[1])
        field = next(
            (
                field
                for field in [
                    'fac_documents',
                    'sic_documents',
                    'uclouvain_sic_documents',
                    'uclouvain_fac_documents',
                ]
                if document_uuid in getattr(admission, field)
            ),
            None,
        )
        document_uuids = [document_uuid]
        document_type = {
            'fac_documents': TypeEmplacementDocument.LIBRE_CANDIDAT_FAC.name,
            'sic_documents': TypeEmplacementDocument.LIBRE_CANDIDAT_SIC.name,
            'uclouvain_sic_documents': TypeEmplacementDocument.LIBRE_INTERNE_SIC.name,
            'uclouvain_fac_documents': TypeEmplacementDocument.LIBRE_INTERNE_FAC.name,
        }[field]

    elif base_identifier == IdentifiantBaseEmplacementDocument.SYSTEME.name:
        # System documents
        # SYSTEME.[DOMAIN_IDENTIFIER]
        document_type = TypeEmplacementDocument.SYSTEME.name
        document_status = StatutEmplacementDocument.VALIDE.name

        if document_identifier_parts[1] == 'DOSSIER_ANALYSE':
            obj = admission
            field = 'pdf_recap'
            document_uuids = admission.pdf_recap

    # Categorized documents
    else:
        document_type = TypeEmplacementDocument.NON_LIBRE.name
        requestable_document = True
        field = document_identifier_parts[-1]
        document_status = requested_document.get('status', StatutEmplacementDocument.NON_ANALYSE.name)

        if base_identifier == OngletsDemande.IDENTIFICATION.name:
            # IDENTIFICATION.[DOMAIN_IDENTIFIER]
            obj = admission.candidate
            field = CORRESPONDANCE_CHAMPS_IDENTIFICATION.get(field)

        elif base_identifier == OngletsDemande.ETUDES_SECONDAIRES.name:
            # ETUDES_SECONDAIRES.[DOMAIN_IDENTIFIER]
            if field in CORRESPONDANCE_CHAMPS_ETUDES_SECONDAIRES_BELGES:
                obj = getattr(admission.candidate, 'belgianhighschooldiploma', None)
                field = CORRESPONDANCE_CHAMPS_ETUDES_SECONDAIRES_BELGES.get(field)
            elif field in CORRESPONDANCE_CHAMPS_ETUDES_SECONDAIRES_BELGES:
                obj = getattr(admission.candidate, 'foreignhighschooldiploma', None)
                field = CORRESPONDANCE_CHAMPS_ETUDES_SECONDAIRES_BELGES.get(field)
            elif field in CORRESPONDANCE_CHAMPS_ETUDES_SECONDAIRES_BELGES:
                obj = getattr(admission.candidate, 'highschooldiplomaalternative', None)
                field = CORRESPONDANCE_CHAMPS_ETUDES_SECONDAIRES_BELGES.get(field)

        elif base_identifier == OngletsDemande.LANGUES.name:
            # LANGUES.[CODE_LANGUE].[DOMAIN_IDENTIFIER]
            if not identifiers_nb == 3:
                return
            language_code = document_identifier_parts[1]
            obj = admission.candidate.languages_knowledge.filter(language__code=language_code).first()
            field = CORRESPONDANCE_CHAMPS_CONNAISSANCES_LANGUES.get(field)

        elif base_identifier == OngletsDemande.CURRICULUM.name:
            if field in CORRESPONDANCE_CHAMPS_CURRICULUM_BASE:
                # CURRICULUM.[DOMAIN_IDENTIFIER]
                obj = admission
                field = CORRESPONDANCE_CHAMPS_CURRICULUM_BASE.get(field)

            elif field in CORRESPONDANCE_CHAMPS_CURRICULUM_EXPERIENCE_ACADEMIQUE:
                # CURRICULUM.[EXPERIENCE_UUID].[DOMAIN_IDENTIFIER]
                if not identifiers_nb == 3:
                    return
                experience_uuid = document_identifier_parts[1]
                field = CORRESPONDANCE_CHAMPS_CURRICULUM_EXPERIENCE_ACADEMIQUE.get(field)
                obj = admission.candidate.educationalexperience_set.filter(uuid=experience_uuid).first()

            elif field in CORRESPONDANCE_CHAMPS_CURRICULUM_ANNEE_EXPERIENCE_ACADEMIQUE:
                # CURRICULUM.[EXPERIENCE_UUID].[EXPERIENCE_YEAR].[DOMAIN_IDENTIFIER]
                if not identifiers_nb == 4:
                    return
                experience_uuid = document_identifier_parts[1]
                experience_year = document_identifier_parts[2]
                field = CORRESPONDANCE_CHAMPS_CURRICULUM_ANNEE_EXPERIENCE_ACADEMIQUE.get(field)
                obj = EducationalExperienceYear.objects.filter(
                    educational_experience__uuid=experience_uuid,
                    academic_year__year=experience_year,
                ).first()

            elif field in CORRESPONDANCE_CHAMPS_CURRICULUM_EXPERIENCE_NON_ACADEMIQUE:
                # CURRICULUM.[EXPERIENCE_UUID].[DOMAIN_IDENTIFIER]
                if not identifiers_nb == 3:
                    return
                experience_uuid = document_identifier_parts[1]
                field = CORRESPONDANCE_CHAMPS_CURRICULUM_EXPERIENCE_NON_ACADEMIQUE.get(field)
                obj = admission.candidate.professionalexperience_set.filter(uuid=experience_uuid).first()

        elif base_identifier == OngletsDemande.INFORMATIONS_ADDITIONNELLES.name:
            # INFORMATIONS_ADDITIONNELLES.[DOMAIN_IDENTIFIER]
            obj = admission
            field = CORRESPONDANCE_CHAMPS_INFORMATIONS_ADDITIONNELLES.get(field)

        elif base_identifier == OngletsDemande.COMPTABILITE.name:
            # COMPTABILITE.[DOMAIN_IDENTIFIER]
            obj = admission.accounting
            field = CORRESPONDANCE_CHAMPS_COMPTABILITE.get(field)

        elif base_identifier == OngletsDemande.PROJET.name:
            # PROJET.[DOMAIN_IDENTIFIER]
            obj = admission
            field = CORRESPONDANCE_CHAMPS_PROJET.get(field)

        elif base_identifier == OngletsDemande.COTUTELLE.name:
            # COTUTELLE.[DOMAIN_IDENTIFIER]
            obj = admission
            field = CORRESPONDANCE_CHAMPS_COTUTELLE.get(field)

        elif base_identifier == OngletsDemande.SUPERVISION.name:
            # SUPERVISION.[ACTOR_UUID].[DOMAIN_IDENTIFIER]
            if not identifiers_nb == 3:
                return
            actor_uuid = document_identifier_parts[1]
            obj = SupervisionActor.objects.filter(uuid=actor_uuid).first()
            field = CORRESPONDANCE_CHAMPS_SUPERVISION.get(field)

        if obj and field:
            document_uuids = getattr(obj, field, [])

    if obj and field and document_type:
        return {
            'obj': obj,
            'field': field,
            'uuids': document_uuids,
            'type': document_type,
            'requestable': requestable_document,
            'specific_question_uuid': specific_question_uuid,
            'status': document_status,
            'reason': requested_document.get('reason'),
            'requested_at': requested_document.get('requested_at'),
            'deadline_at': requested_document.get('deadline_at'),
            'last_action_at': requested_document.get('last_action_at'),
            'last_actor': requested_document.get('last_actor'),
        }


CORRESPONDANCE_CHAMPS_IDENTIFICATION = {
    'PASSEPORT': 'passport',
    'CARTE_IDENTITE': 'id_card',
    'PHOTO_IDENTITE': 'id_photo',
}

CORRESPONDANCE_CHAMPS_ETUDES_SECONDAIRES_BELGES = {
    'DIPLOME_BELGE_DIPLOME': 'high_school_diploma',
    'DIPLOME_BELGE_CERTIFICAT_INSCRIPTION': 'enrolment_certificate',
}

CORRESPONDANCE_CHAMPS_ETUDES_SECONDAIRES_ETRANGERES = {
    'DIPLOME_ETRANGER_DECISION_FINAL_EQUIVALENCE_UE': 'final_equivalence_decision_ue',
    'DIPLOME_ETRANGER_PREUVE_DECISION_EQUIVALENCE': 'equivalence_decision_proof',
    'DIPLOME_ETRANGER_DECISION_FINAL_EQUIVALENCE_HORS_UE': 'final_equivalence_decision_not_ue',
    'DIPLOME_ETRANGER_DIPLOME': 'high_school_diploma',
    'DIPLOME_ETRANGER_TRADUCTION_DIPLOME': 'high_school_diploma_translation',
    'DIPLOME_ETRANGER_CERTIFICAT_INSCRIPTION': 'enrolment_certificate',
    'DIPLOME_ETRANGER_TRADUCTION_CERTIFICAT_INSCRIPTION': 'enrolment_certificate_translation',
    'DIPLOME_ETRANGER_RELEVE_NOTES': 'high_school_transcript',
    'DIPLOME_ETRANGER_TRADUCTION_RELEVE_NOTES': 'high_school_transcript_translation',
}

CORRESPONDANCE_CHAMPS_ETUDES_SECONDAIRES_ALTERNATIVES = {
    'ALTERNATIVE_SECONDAIRES_EXAMEN_ADMISSION_PREMIER_CYCLE': 'first_cycle_admission_exam',
}

CORRESPONDANCE_CHAMPS_CONNAISSANCES_LANGUES = {
    'CERTIFICAT_CONNAISSANCE_LANGUE': 'certificate',
}

CORRESPONDANCE_CHAMPS_CURRICULUM_BASE = {
    'DIPLOME_EQUIVALENCE': 'diploma_equivalence',
    'CURRICULUM': 'curriculum',
}

CORRESPONDANCE_CHAMPS_CURRICULUM_EXPERIENCE_ACADEMIQUE = {
    'RELEVE_NOTES': 'transcript',
    'TRADUCTION_RELEVE_NOTES': 'transcript_translation',
    'RESUME_MEMOIRE': 'dissertation_summary',
    'DIPLOME': 'graduate_degree',
    'TRADUCTION_DIPLOME': 'graduate_degree_translation',
}

CORRESPONDANCE_CHAMPS_CURRICULUM_ANNEE_EXPERIENCE_ACADEMIQUE = {
    'RELEVE_NOTES_ANNUEL': 'transcript',
    'TRADUCTION_RELEVE_NOTES_ANNUEL': 'transcript_translation',
}

CORRESPONDANCE_CHAMPS_CURRICULUM_EXPERIENCE_NON_ACADEMIQUE = {
    'CERTIFICAT_EXPERIENCE': 'certificate',
}

CORRESPONDANCE_CHAMPS_INFORMATIONS_ADDITIONNELLES = {
    'COPIE_TITRE_SEJOUR': 'residence_permit',
    'ATTESTATION_INSCRIPTION_REGULIERE': 'regular_registration_proof',
    'FORMULAIRE_MODIFICATION_INSCRIPTION': 'registration_change_form',
}

CORRESPONDANCE_CHAMPS_COMPTABILITE = {
    'ATTESTATION_ABSENCE_DETTE_ETABLISSEMENT': 'institute_absence_debts_certificate',
    'ATTESTATION_ENFANT_PERSONNEL': 'is_staff_child',
    'CARTE_RESIDENT_LONGUE_DUREE': 'long_term_resident_card',
    'CARTE_CIRE_SEJOUR_ILLIMITE_ETRANGER': 'cire_unlimited_stay_foreigner_card',
    'CARTE_SEJOUR_MEMBRE_UE': 'ue_family_member_residence_card',
    'CARTE_SEJOUR_PERMANENT_MEMBRE_UE': 'ue_family_member_permanent_residence_card',
    'CARTE_A_B_REFUGIE': 'refugee_a_b_card',
    'ANNEXE_25_26_REFUGIES_APATRIDES': 'refugees_stateless_annex_25_26',
    'ATTESTATION_IMMATRICULATION': 'registration_certificate',
    'CARTE_A_B': 'a_b_card',
    'DECISION_PROTECTION_SUBSIDIAIRE': 'subsidiary_protection_decision',
    'DECISION_PROTECTION_TEMPORAIRE': 'temporary_protection_decision',
    'TITRE_SEJOUR_3_MOIS_PROFESSIONEL': 'professional_3_month_residence_permit',
    'FICHES_REMUNERATION': 'salary_slips',
    'TITRE_SEJOUR_3_MOIS_REMPLACEMENT': 'replacement_3_month_residence_permit',
    'PREUVE_ALLOCATIONS_CHOMAGE_PENSION_INDEMNITE': ('unemployment_benefit_pension_compensation_proof'),
    'ATTESTATION_CPAS': 'cpas_certificate',
    'COMPOSITION_MENAGE_ACTE_NAISSANCE': 'household_composition_or_birth_certificate',
    'ACTE_TUTELLE': 'tutorship_act',
    'COMPOSITION_MENAGE_ACTE_MARIAGE': 'household_composition_or_marriage_certificate',
    'ATTESTATION_COHABITATION_LEGALE': 'legal_cohabitation_certificate',
    'CARTE_IDENTITE_PARENT': 'parent_identity_card',
    'TITRE_SEJOUR_LONGUE_DUREE_PARENT': 'parent_long_term_residence_permit',
    'ANNEXE_25_26_REFUGIES_APATRIDES_DECISION_PROTECTION_PARENT': (
        'parent_refugees_stateless_annex_25_26_or_protection_decision'
    ),
    'TITRE_SEJOUR_3_MOIS_PARENT': 'parent_3_month_residence_permit',
    'FICHES_REMUNERATION_PARENT': 'parent_salary_slips',
    'ATTESTATION_CPAS_PARENT': 'parent_cpas_certificate',
    'DECISION_BOURSE_CFWB': 'cfwb_scholarship_decision',
    'ATTESTATION_BOURSIER': 'scholarship_certificate',
    'TITRE_IDENTITE_SEJOUR_LONGUE_DUREE_UE': 'ue_long_term_stay_identity_document',
    'TITRE_SEJOUR_BELGIQUE': 'belgium_residence_permit',
}

CORRESPONDANCE_CHAMPS_PROJET = {
    'PREUVE_BOURSE': 'scholarship_proof',
    'DOCUMENTS_PROJET': 'project_document',
    'PROPOSITION_PROGRAMME_DOCTORAL': 'program_proposition',
    'PROJET_FORMATION_COMPLEMENTAIRE': 'additional_training_project',
    'GRAPHE_GANTT': 'gantt_graph',
    'LETTRES_RECOMMANDATION': 'recommendation_letters',
}

CORRESPONDANCE_CHAMPS_COTUTELLE = {
    'DEMANDE_OUVERTURE': 'cotutelle_opening_request',
    'CONVENTION': 'cotutelle_convention',
    'AUTRES_DOCUMENTS': 'cotutelle_other_documents',
}

CORRESPONDANCE_CHAMPS_SUPERVISION = {
    'APPROBATION_PDF': 'pdf_from_candidate',
}
