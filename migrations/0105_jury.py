# Generated by Django 3.2.18 on 2023-05-05 15:37

from django.db import migrations, models
import django.db.models.deletion
import osis_document.contrib.fields
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('reference', '0017_delete_highschool'),
        ('base', '0647_merge_20230113_1039'),
        ('admission', '0104_baseadmission_checklist'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='doctorateadmission',
            options={
                'ordering': ('-created_at',),
                'permissions': [
                    ('download_jury_approved_pdf', 'Can download jury-approved PDF'),
                    ('upload_jury_approved_pdf', 'Can upload jury-approved PDF'),
                    ('upload_signed_scholarship', 'Can upload signed scholarship'),
                    ('check_publication_authorisation', 'Can check publication autorisation'),
                    ('validate_registration', 'Can validate registration'),
                    ('approve_jury', 'Can approve jury'),
                    ('approve_confirmation_paper', 'Can approve confirmation paper'),
                    ('validate_doctoral_training', 'Can validate doctoral training'),
                    ('download_pdf_confirmation', 'Can download PDF confirmation'),
                    ('upload_pdf_confirmation', 'Can upload PDF confirmation'),
                    ('fill_thesis', 'Can fill thesis'),
                    ('submit_thesis', 'Can submit thesis'),
                    ('appose_cdd_notice', 'Can appose CDD notice'),
                    ('appose_sic_notice', 'Can appose SIC notice'),
                    ('upload_defense_report', 'Can upload defense report'),
                    ('check_copyright', 'Can check copyright'),
                    ('sign_diploma', 'Can sign diploma'),
                    ('request_signatures', 'Can request signatures'),
                    ('approve_proposition', 'Can approve proposition'),
                    ('view_admission_person', 'Can view the information related to the admission request author'),
                    ('change_admission_person', 'Can update the information related to the admission request author'),
                    ('view_admission_coordinates', 'Can view the coordinates of the admission request author'),
                    ('change_admission_coordinates', 'Can update the coordinates of the admission request author'),
                    ('view_admission_secondary_studies', 'Can view the information related to the secondary studies'),
                    (
                        'change_admission_secondary_studies',
                        'Can update the information related to the secondary studies',
                    ),
                    ('view_admission_languages', 'Can view the information related to language knowledge'),
                    ('change_admission_languages', 'Can update the information related to language knowledge'),
                    ('view_admission_curriculum', 'Can view the information related to the curriculum'),
                    ('change_admission_curriculum', 'Can update the information related to the curriculum'),
                    ('view_admission_project', 'Can view the information related to the admission project'),
                    ('change_admission_project', 'Can update the information related to the admission project'),
                    ('view_admission_cotutelle', 'Can view the information related to the admission cotutelle'),
                    ('change_admission_cotutelle', 'Can update the information related to the admission cotutelle'),
                    ('view_admission_supervision', 'Can view the information related to the admission supervision'),
                    ('change_admission_supervision', 'Can update the information related to the admission supervision'),
                    ('view_admission_jury', 'Can view the information related to the admission jury'),
                    ('change_admission_jury', 'Can update the information related to the admission jury'),
                    ('view_admission_confirmation', 'Can view the information related to the confirmation paper'),
                    ('change_admission_confirmation', 'Can update the information related to the confirmation paper'),
                    ('add_supervision_member', 'Can add a member to the supervision group'),
                    ('remove_supervision_member', 'Can remove a member from the supervision group'),
                    ('submit_doctorateadmission', 'Can submit a doctorate admission proposition'),
                ],
                'verbose_name': 'Doctorate admission',
            },
        ),
        migrations.AddField(
            model_name='doctorateadmission',
            name='accounting_situation',
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='doctorateadmission',
            name='comment_about_jury',
            field=models.TextField(blank=True, default='', verbose_name='Comment about jury'),
        ),
        migrations.AddField(
            model_name='doctorateadmission',
            name='defense_indicative_date',
            field=models.DateField(blank=True, null=True, verbose_name='Defense indicative date'),
        ),
        migrations.AddField(
            model_name='doctorateadmission',
            name='defense_language',
            field=models.CharField(
                blank=True,
                choices=[('FRENCH', 'French'), ('ENGLISH', 'English'), ('OTHER', 'Other'), ('UNDECIDED', 'Undecided')],
                default='UNDECIDED',
                max_length=255,
                verbose_name='Defense language',
            ),
        ),
        migrations.AddField(
            model_name='doctorateadmission',
            name='defense_method',
            field=models.CharField(
                blank=True,
                choices=[
                    (
                        'FORMULE_1',
                        'Method 1 (the private defense and the public defense are separated by at least a month',
                    ),
                    (
                        'FORMULE_2',
                        'Method 2 (The private defense and the public defense are organised the same day, and subjected to an admissibility condition)',
                    ),
                ],
                default='',
                max_length=255,
                verbose_name='Defense method',
            ),
        ),
        migrations.AddField(
            model_name='doctorateadmission',
            name='jury_approval',
            field=osis_document.contrib.fields.FileField(
                base_field=models.UUIDField(), default=list, size=None, verbose_name='Jury approval'
            ),
        ),
        migrations.AddField(
            model_name='doctorateadmission',
            name='thesis_proposed_title',
            field=models.CharField(blank=True, default='', max_length=255, verbose_name='Proposed thesis title'),
        ),
        migrations.AlterField(
            model_name='doctorateadmission',
            name='post_enrolment_status',
            field=models.CharField(
                choices=[
                    ('ADMISSION_IN_PROGRESS', 'ADMISSION_IN_PROGRESS'),
                    ('ADMITTED', 'ADMITTED'),
                    ('SUBMITTED_CONFIRMATION', 'SUBMITTED_CONFIRMATION'),
                    ('PASSED_CONFIRMATION', 'PASSED_CONFIRMATION'),
                    ('NOT_ALLOWED_TO_CONTINUE', 'NOT_ALLOWED_TO_CONTINUE'),
                    ('CONFIRMATION_TO_BE_REPEATED', 'CONFIRMATION_TO_BE_REPEATED'),
                    ('JURY_SOUMIS', 'JURY_SOUMIS'),
                    ('JURY_APPROUVE_CA', 'JURY_APPROUVE_CA'),
                    ('JURY_APPROUVE_CDD', 'JURY_APPROUVE_CDD'),
                    ('JURY_REFUSE_CDD', 'JURY_REFUSE_CDD'),
                    ('JURY_APPROUVE_ADRE', 'JURY_APPROUVE_ADRE'),
                    ('JURY_REFUSE_ADRE', 'JURY_REFUSE_ADRE'),
                ],
                default='ADMISSION_IN_PROGRESS',
                max_length=30,
                verbose_name='Post-enrolment status',
            ),
        ),
        migrations.CreateModel(
            name='JuryMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                (
                    'role',
                    models.CharField(
                        choices=[('PRESIDENT', 'PRESIDENT'), ('SECRETAIRE', 'SECRETAIRE'), ('MEMBRE', 'MEMBRE')],
                        max_length=50,
                        verbose_name='Role',
                    ),
                ),
                (
                    'other_institute',
                    models.CharField(blank=True, default='', max_length=255, verbose_name='Other institute'),
                ),
                ('institute', models.CharField(blank=True, default='', max_length=255, verbose_name='Institute')),
                ('last_name', models.CharField(blank=True, default='', max_length=255, verbose_name='Surname')),
                ('first_name', models.CharField(blank=True, default='', max_length=255, verbose_name='First name')),
                (
                    'title',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('DOCTEUR', 'Doctor'),
                            ('PROFESSEUR', 'Professor'),
                            ('NON_DOCTEUR', 'Does not have a doctor title'),
                        ],
                        default='',
                        max_length=50,
                        verbose_name='Title',
                    ),
                ),
                (
                    'non_doctor_reason',
                    models.TextField(blank=True, default='', max_length=255, verbose_name='Non doctor reason'),
                ),
                (
                    'gender',
                    models.CharField(
                        blank=True,
                        choices=[('FEMININ', 'Female'), ('MASCULIN', 'Male'), ('AUTRE', 'Other')],
                        default='',
                        max_length=50,
                        verbose_name='Gender',
                    ),
                ),
                ('email', models.EmailField(blank=True, default='', max_length=255, verbose_name='Email')),
                (
                    'country',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to='reference.country',
                        verbose_name='Country',
                    ),
                ),
                (
                    'doctorate',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='jury_members',
                        to='admission.doctorateadmission',
                        verbose_name='PhD',
                    ),
                ),
                (
                    'person',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to='base.person',
                        verbose_name='Person',
                    ),
                ),
                (
                    'promoter',
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={'type': 'PROMOTER'},
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to='admission.supervisionactor',
                        verbose_name='Supervisor',
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name='jurymember',
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ('promoter__isnull', False),
                        ('person__isnull', True),
                        ('institute', ''),
                        ('other_institute', ''),
                        ('country__isnull', True),
                        ('last_name', ''),
                        ('first_name', ''),
                        ('title', ''),
                        ('gender', ''),
                        ('email', ''),
                    ),
                    models.Q(
                        ('promoter__isnull', True),
                        ('person__isnull', False),
                        ('institute', ''),
                        ('country__isnull', True),
                        ('last_name', ''),
                        ('first_name', ''),
                        ('title', ''),
                        ('gender', ''),
                        ('email', ''),
                    ),
                    models.Q(
                        ('promoter__isnull', True),
                        ('person__isnull', True),
                        models.Q(('institute', ''), _negated=True),
                        ('country__isnull', False),
                        models.Q(('last_name', ''), _negated=True),
                        models.Q(('first_name', ''), _negated=True),
                        models.Q(('title', ''), _negated=True),
                        models.Q(('gender', ''), _negated=True),
                        models.Q(('email', ''), _negated=True),
                    ),
                    _connector='OR',
                ),
                name='admission_jurymember_constraint',
            ),
        ),
    ]
