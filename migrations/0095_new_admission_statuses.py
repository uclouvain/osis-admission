# Generated by Django 3.2.16 on 2023-03-07 17:10

from django.db import migrations, models
from django.db.models import Case, When, Value, F

from admission.ddd.admission.doctorat.preparation.domain.model.enums import ChoixStatutPropositionDoctorale
from admission.ddd.admission.formation_continue.domain.model.enums import ChoixStatutPropositionContinue
from admission.ddd.admission.formation_generale.domain.model.enums import ChoixStatutPropositionGenerale


GENERAL_MAPPING_STATUS = {
    'CANCELLED': ChoixStatutPropositionGenerale.ANNULEE.name,
    'IN_PROGRESS': ChoixStatutPropositionGenerale.EN_BROUILLON.name,
    'SUBMITTED': ChoixStatutPropositionGenerale.CONFIRMEE.name,
    'ENROLLED': ChoixStatutPropositionGenerale.INSCRIPTION_AUTORISEE.name,
}

CONTINUING_MAPPING_STATUS = {
    'CANCELLED': ChoixStatutPropositionContinue.ANNULEE.name,
    'IN_PROGRESS': ChoixStatutPropositionContinue.EN_BROUILLON.name,
    'SUBMITTED': ChoixStatutPropositionContinue.CONFIRMEE.name,
    'ENROLLED': ChoixStatutPropositionContinue.INSCRIPTION_AUTORISEE.name,
}

DOCTORATE_MAPPING_STATUS = {
    'CANCELLED': ChoixStatutPropositionDoctorale.ANNULEE.name,
    'IN_PROGRESS': ChoixStatutPropositionDoctorale.EN_BROUILLON.name,
    'SIGNING_IN_PROGRESS': ChoixStatutPropositionDoctorale.EN_ATTENTE_DE_SIGNATURE.name,
    'SUBMITTED': ChoixStatutPropositionDoctorale.CONFIRMEE.name,
    'ENROLLED': ChoixStatutPropositionDoctorale.INSCRIPTION_AUTORISEE.name,
}


def forward(apps, schema_editor):
    # General
    GeneralEducationAdmission = apps.get_model("admission", "GeneralEducationAdmission")
    cases = [
        When(status=old_status, then=Value(new_status)) for old_status, new_status in GENERAL_MAPPING_STATUS.items()
    ]
    GeneralEducationAdmission.objects.update(status=Case(*cases, default=F('status')))

    # Continuing
    ContinuingEducationAdmission = apps.get_model("admission", "ContinuingEducationAdmission")
    cases = [
        When(status=old_status, then=Value(new_status)) for old_status, new_status in CONTINUING_MAPPING_STATUS.items()
    ]
    ContinuingEducationAdmission.objects.update(status=Case(*cases, default=F('status')))

    # Doctorate
    DoctorateAdmission = apps.get_model("admission", "DoctorateAdmission")
    cases = [
        When(status=old_status, then=Value(new_status)) for old_status, new_status in DOCTORATE_MAPPING_STATUS.items()
    ]
    DoctorateAdmission.objects.update(status=Case(*cases, default=F('status')))


def backward(apps, schema_editor):
    # General
    GeneralEducationAdmission = apps.get_model("admission", "GeneralEducationAdmission")
    cases = [
        When(status=new_status, then=Value(old_status)) for old_status, new_status in GENERAL_MAPPING_STATUS.items()
    ]
    GeneralEducationAdmission.objects.update(status=Case(*cases, default=F('status')))

    # Continuing
    ContinuingEducationAdmission = apps.get_model("admission", "ContinuingEducationAdmission")
    cases = [
        When(status=new_status, then=Value(old_status)) for old_status, new_status in CONTINUING_MAPPING_STATUS.items()
    ]
    ContinuingEducationAdmission.objects.update(status=Case(*cases, default=F('status')))

    # Doctorate
    DoctorateAdmission = apps.get_model("admission", "DoctorateAdmission")
    cases = [
        When(status=new_status, then=Value(old_status)) for old_status, new_status in DOCTORATE_MAPPING_STATUS.items()
    ]
    DoctorateAdmission.objects.update(status=Case(*cases, default=F('status')))


class Migration(migrations.Migration):

    dependencies = [
        ('admission', '0094_alter_admissiontask_admission'),
    ]

    operations = [
        migrations.AlterField(
            model_name='generaleducationadmission',
            name='status',
            field=models.CharField(
                choices=[
                    ('EN_BROUILLON', 'In draft'),
                    ('CONFIRMEE', 'Confirmed application (by student)'),
                    ('COMPLETEE', 'Completed application'),
                    ('ANNULEE', 'Cancelled application'),
                    ('A_COMPLETER_POUR_SIC', 'To be completed (by student) for SIC'),
                    ('A_COMPLETER_POUR_FAC_CDD', 'To be completed (by student) for FAC/CDD'),
                    ('TRAITEMENT_SIC', 'Processing by SIC'),
                    ('TRAITEMENT_FAC_CDD', 'Processing by Fac/CDD'),
                    ('ATTENTE_VALIDATION_DIRECTION', 'Pending validation from management'),
                    ('INSCRIPTION_AUTORISEE', 'Enrollment allowed'),
                    ('INSCRIPTION_REFUSEE', 'Enrollment denied'),
                    ('CLOTUREE', 'Closed'),
                    ('EN_RECOURS', 'Under appeal'),
                ],
                default='EN_BROUILLON',
                max_length=30,
            ),
        ),
        migrations.AlterField(
            model_name='continuingeducationadmission',
            name='status',
            field=models.CharField(
                choices=[
                    ('EN_BROUILLON', 'In draft'),
                    ('CONFIRMEE', 'Confirmed application (by student)'),
                    ('ANNULEE', 'Cancelled application'),
                    ('INSCRIPTION_AUTORISEE', 'Enrollment allowed'),
                ],
                default='EN_BROUILLON',
                max_length=30,
            ),
        ),
        migrations.AlterField(
            model_name='doctorateadmission',
            name='status',
            field=models.CharField(
                choices=[
                    ('EN_BROUILLON', 'In draft'),
                    ('EN_ATTENTE_DE_SIGNATURE', 'Waiting for signature'),
                    ('CONFIRMEE', 'Confirmed application (by student)'),
                    ('ANNULEE', 'Cancelled application'),
                    ('INSCRIPTION_AUTORISEE', 'Enrollment allowed'),
                ],
                default='EN_BROUILLON',
                max_length=30,
            ),
        ),
        migrations.RunPython(code=forward, reverse_code=backward),
        migrations.CreateModel(
            name='BaseAdmissionProxy',
            fields=[],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('admission.baseadmission',),
        ),
    ]
