# Generated by Django 3.2.21 on 2023-10-06 14:14

import django.contrib.postgres.fields
from ckeditor.fields import RichTextField
from django.db import migrations, models


def populate_additional_approval_conditions(apps, schema_editor):
    AdditionalApprovalCondition = apps.get_model('admission', 'AdditionalApprovalCondition')

    AdditionalApprovalCondition.objects.create(
        name_fr="La réussite de votre année académique en cours.",
        name_en="Successful completion of your current academic year.",
        order=1,
    )
    AdditionalApprovalCondition.objects.create(
        name_fr="L'obtention d'une décision d'équivalence vous donnant accès au programme souhaité.",
        name_en="An equivalency decision conferring eligibility for the desired programme.",
        order=2,
    )
    AdditionalApprovalCondition.objects.create(
        name_fr="La réussite du diplôme d'aptitude à l'enseignement supérieur (DAES)",
        name_en="Earning the Diploma of Aptitude for Higher Education (DAES)",
        order=3,
    )
    AdditionalApprovalCondition.objects.create(
        name_fr="La réussite de votre examen d'admission en ingénieur civil.",
        name_en="Passing the civil engineering entrance exam.",
        order=4,
    )
    AdditionalApprovalCondition.objects.create(
        name_fr="La réussite d'un test de connaissance de la langue française (type DALF, DELF, TCF,...).",
        name_en="Passing a French language knowledge test (DALF, DELF, TCF, etc.).",
        order=5,
    )
    AdditionalApprovalCondition.objects.create(
        name_fr="La réussite de l'examen de maîtrise de la langue française. Renseignements :"
        " <a href=\"https://uclouvain.be/fr/etudier/inscriptions/emlf.html\" target=\"_blank\">"
        "https://uclouvain.be/fr/etudier/inscriptions/emlf.html</a>",
        name_en="Passing the French language proficiency exam (EMLF). Information:"
        " <a href=\"https://uclouvain.be/fr/etudier/inscriptions/emlf.html\" target=\"_blank\">"
        "https://uclouvain.be/fr/etudier/inscriptions/emlf.html</a>",
        order=6,
    )
    AdditionalApprovalCondition.objects.create(
        name_fr="La réussite de votre test IELTS ou TOEFL.",
        name_en="Passing the IELTS or TOEFL.",
        order=7,
    )
    AdditionalApprovalCondition.objects.create(
        name_fr="La présentation de votre attestation de réussite du concours d'entrée en médecine et dentisterie.",
        name_en="Passing the medicine and dentistry entrance exam.",
        order=8,
    )
    AdditionalApprovalCondition.objects.create(
        name_fr="L'obtention de la reconnaissance du diplôme de médecine auprès du Ministère de la Fédération "
        "Wallonie-Bruxelles",
        name_en="Obtaining recognition of the medical diploma from the Ministry of the Wallonia-Brussels Federation",
        order=9,
    )
    AdditionalApprovalCondition.objects.create(
        name_fr="L'obtention de l'Article 146 (autorisation de pratiquer l'Art de Guérir en Belgique)",
        name_en="Satisfying Article 146 (authorisation to practise the healing arts in Belgium)",
        order=10,
    )
    AdditionalApprovalCondition.objects.create(
        name_fr="L'obtention de l'Equivalence du diplôme de Médecin et du Visa d'exercice",
        name_en="Obtaining the Medical Diploma Equivalency and Practice Visa",
        order=11,
    )
    AdditionalApprovalCondition.objects.create(
        name_fr="L'inscription à l'Ordre des Médecins de Belgique.",
        name_en="Registration with the Belgian Medical Association.",
        order=12,
    )


def populate_refusal_reasons(apps, schema_editor):
    RefusalReasonCategory = apps.get_model('admission', 'RefusalReasonCategory')
    RefusalReason = apps.get_model('admission', 'RefusalReason')

    category = RefusalReasonCategory.objects.create(name='Titre requis insuffisant')
    RefusalReason.objects.create(
        category=category,
        name="Vous n'êtes pas titulaire du titre requis suffisant pour le programme visé.",
    )
    RefusalReason.objects.create(
        category=category,
        name="Vous n'êtes pas titulaire d'un titre universitaire de premier cycle.",
    )
    RefusalReason.objects.create(
        category=category,
        name="Votre formation initiale ne comporte pas l'équivalent de 180 crédits.",
    )
    RefusalReason.objects.create(
        category=category,
        name="Votre formation initiale ne comporte pas l'équivalent de 240 crédits.",
    )
    RefusalReason.objects.create(
        category=category,
        name="Votre formation initiale ne comporte pas l'équivalent de 300 crédits.",
    )
    RefusalReason.objects.create(
        category=category,
        name="Votre diplôme n'est pas issu d'une institution universitaire reconnue par l'un des sites officiels "
        "suivants "
        " <a href=\"https://www.whed.net/\" target=\"_blank\">"
        "https://www.whed.net/</a> ou "
        " <a href=\"https://www.enic-naric.net/\" target=\"_blank\">"
        "https://www.enic-naric.net/</a>.",
    )

    category = RefusalReasonCategory.objects.create(name='Résultats insuffisants')
    RefusalReason.objects.create(
        category=category,
        name="Vos résultats académiques ne satisfont pas aux critères d'admission.",
    )
    RefusalReason.objects.create(
        category=category,
        name="Le ou les échec(s) constaté(s) durant vos années d'études, ne permet pas de prendre en considération "
        "l'ensemble de votre parcours antérieur.",
    )
    RefusalReason.objects.create(
        category=category,
        name="Votre parcours académique est jugé insuffisant et n'offre, par conséquent, pas les garanties attendues "
        "de réussite.",
    )

    category = RefusalReasonCategory.objects.create(name='Prérequis insuffisants')
    RefusalReason.objects.create(
        category=category,
        name="Votre formation ne couvre pas les prérequis du programme visé.",
    )
    RefusalReason.objects.create(
        category=category,
        name="La durée de votre formation est insuffisante.",
    )
    RefusalReason.objects.create(
        category=category,
        name="Vos résultats au test de GMAT/TAGE MAGE/GRE ne répondent pas au niveau exigé par le jury d'admission.",
    )

    category = RefusalReasonCategory.objects.create(name='Niveau de langue insuffisant/absent')
    RefusalReason.objects.create(
        category=category,
        name="Votre niveau de langue est insuffisant par rapport à celui exigé.",
    )
    RefusalReason.objects.create(
        category=category,
        name="La preuve du niveau de langue requis n'a pas été apportée.",
    )
    RefusalReason.objects.create(
        category=category,
        name="Votre formation préalable ne compte pas de deuxième langue moderne.",
    )

    category = RefusalReasonCategory.objects.create(name='Expériences professionnelle insuffisante')
    RefusalReason.objects.create(
        category=category,
        name="Votre expérience professionnelle utile n'est pas suffisante.",
    )
    RefusalReason.objects.create(
        category=category,
        name="Votre expérience professionnelle ne compense pas le manque de formation.",
    )
    RefusalReason.objects.create(
        category=category,
        name="Votre expérience professionnelle ne compense pas la faiblesse de vos résultats.",
    )
    RefusalReason.objects.create(
        category=category,
        name="Votre expérience professionnelle ne compense pas le nombre de crédits insuffisants.",
    )

    category = RefusalReasonCategory.objects.create(name='Disciplinaire')
    RefusalReason.objects.create(
        category=category,
        name="Votre dossier ne comporte pas de portfolio de vos projets d'architecture antérieurs.",
    )
    RefusalReason.objects.create(
        category=category,
        name="Votre parcours juridique est trop différent du système belge.",
    )

    category = RefusalReasonCategory.objects.create(name='Secteur santé')
    RefusalReason.objects.create(
        category=category,
        name="Votre diplôme de médecin obtenu hors Union européenne ne vous permet pas d'entamer la formation pour "
        "laquelle vous candidatez.",
    )
    RefusalReason.objects.create(
        category=category,
        name="Vous ne possédez pas suffisamment de notions de base en santé publique.",
    )
    RefusalReason.objects.create(
        category=category,
        name="Vous n'avez pas les connaissances nécessaires et suffisantes en bureautique.",
    )
    RefusalReason.objects.create(
        category=category,
        name="Votre lettre de motivation ne fait pas preuve d'un projet réaliste et en rapport avec la santé publique.",
    )
    RefusalReason.objects.create(
        category=category,
        name="Vous êtes titulaire d'un titre de médecin acquis en dehors de l'Union européenne, non rendu équivalent, "
        "qui ne donne pas accès à la formation choisie.",
    )
    RefusalReason.objects.create(
        category=category,
        name="Vous n'êtes pas inscrit·e à l'Ordre des Médecins.",
    )
    RefusalReason.objects.create(
        category=category,
        name="Vous n'êtes pas titulaire de l'équivalence requise (Arrêté royal et Visa ministériel).",
    )
    RefusalReason.objects.create(
        category=category,
        name="Vous n'êtes pas titulaire d'un diplôme de pharmacien délivré au sein de l'Union Européenne imposé par la "
        "législation dans le cadre de l'accès à la formation souhaitée.",
    )
    RefusalReason.objects.create(
        category=category,
        name="Votre dossier a été introduit en dehors des délais fixés par la Commission de sélection. Nous vous "
        "invitons à réintroduire un dossier lors de la prochaine campagne d'admission.",
    )
    category = RefusalReasonCategory.objects.create(name='Inscription secondaire incompatible')
    RefusalReason.objects.create(
        category=category,
        name="Le jury d'admission estime que votre demande d'admission n'est pas compatible avec votre inscription "
        "principale.",
    )

    category = RefusalReasonCategory.objects.create(name='Inscription tardive')
    RefusalReason.objects.create(
        category=category,
        name="Votre demande d'inscription a été introduite au-delà du 30 septembre.",
    )

    category = RefusalReasonCategory.objects.create(name='Statut BAMA')
    RefusalReason.objects.create(
        category=category,
        name="Vous avez plus de 15 crédits résiduels de bachelier.",
    )
    RefusalReason.objects.create(
        category=category,
        name="Vous n'avez pas effectué votre bachelier dans l'enseignement supérieur de plein exercice de la "
        "Communauté française de Belgique.",
    )

    category = RefusalReasonCategory.objects.create(name='Finançabilité')
    RefusalReason.objects.create(
        category=category,
        name="Vous ne remplissez plus les conditions académiques de finançabilité (art. 5).",
    )
    RefusalReason.objects.create(
        category=category,
        name="Vous ne remplissez pas les conditions de finançabilité liées à la nationalité (art. 3).",
    )
    RefusalReason.objects.create(
        category=category,
        name="Votre demande d'inscription vise des études qui ne donnent pas lieu à un financement (art. 2) - AESS / "
        "CAEAS",
    )

    category = RefusalReasonCategory.objects.create(name='Réorientation')
    RefusalReason.objects.create(
        category=category,
        name="Le jury d'admission a refusé votre demande de réorientation car vos résultats sont insuffisants pour "
        "pouvoir suivre le programme visé.",
    )


class Migration(migrations.Migration):

    dependencies = [
        ('admission', '0123_admission_decision_evolutions_1'),
    ]

    operations = [
        # Admission
        migrations.RemoveField(
            model_name='generaleducationadmission',
            name='fac_refusal_reason',
        ),
        migrations.RemoveField(
            model_name='generaleducationadmission',
            name='other_fac_refusal_reason',
        ),
        migrations.AddField(
            model_name='generaleducationadmission',
            name='other_refusal_reasons',
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.TextField(),
                blank=True,
                default=list,
                size=None,
                verbose_name='Other refusal reasons',
            ),
        ),
        migrations.AlterField(
            model_name='generaleducationadmission',
            name='free_additional_approval_conditions',
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.TextField(),
                blank=True,
                default=list,
                size=None,
                verbose_name='Free additional approval conditions',
            ),
        ),
        migrations.AddField(
            model_name='generaleducationadmission',
            name='refusal_reasons',
            field=models.ManyToManyField(
                blank=True,
                related_name='_admission_generaleducationadmission_refusal_reasons_+',
                to='admission.RefusalReason',
                verbose_name='Refusal reasons',
            ),
        ),
        # Refusal
        migrations.AlterModelOptions(
            name='refusalreasoncategory',
            options={
                'ordering': ['name'],
                'verbose_name': 'Refusal reason category',
                'verbose_name_plural': 'Refusal reason categories',
            },
        ),
        migrations.RenameField(
            model_name='refusalreasoncategory',
            old_name='name_fr',
            new_name='name',
        ),
        migrations.AlterField(
            model_name='refusalreasoncategory',
            name='name',
            field=models.CharField(max_length=255, verbose_name='Name'),
        ),
        migrations.RemoveField(
            model_name='refusalreasoncategory',
            name='name_en',
        ),
        migrations.AlterModelOptions(
            name='refusalreason',
            options={'ordering': ['name'], 'verbose_name': 'Refusal reason', 'verbose_name_plural': 'Refusal reasons'},
        ),
        migrations.RemoveField(
            model_name='refusalreason',
            name='name_en',
        ),
        migrations.RenameField(
            model_name='refusalreason',
            old_name='name_fr',
            new_name='name',
        ),
        migrations.AlterField(
            model_name='refusalreason',
            name='name',
            field=RichTextField(verbose_name='Name'),
        ),
        # Additional approval condition
        migrations.AddField(
            model_name='additionalapprovalcondition',
            name='order',
            field=models.FloatField(default=0, verbose_name='Order'),
        ),
        migrations.AlterModelOptions(
            name='additionalapprovalcondition',
            options={
                'ordering': ['order'],
                'verbose_name': 'Additional approval condition',
                'verbose_name_plural': 'Additional approval conditions',
            },
        ),
        migrations.AlterField(
            model_name='additionalapprovalcondition',
            name='name_en',
            field=RichTextField(verbose_name='English name'),
        ),
        migrations.AlterField(
            model_name='additionalapprovalcondition',
            name='name_fr',
            field=RichTextField(verbose_name='French name'),
        ),
        migrations.RunPython(code=populate_refusal_reasons, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(code=populate_additional_approval_conditions, reverse_code=migrations.RunPython.noop),
    ]
